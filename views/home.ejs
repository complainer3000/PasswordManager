<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Manager Dashboard</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Welcome, <%= user.username %>!</h1>
        
        <h2>Add New Login Credentials</h2>
        <form action="/add-credentials" method="POST">
            <input type="text" name="site" placeholder="Site (e.g. facebook.com)" required>
            <input type="text" name="username" placeholder="Username or Email" required>
            <input type="password" name="password" placeholder="Password" required>
            <button type="button" id="generatePassword">Generate Random Password</button>
            <input type="submit" value="Add Credentials">
        </form>
    
        <h2>Your Stored Credentials:</h2>
        <ul>
            <% passwords.forEach(function(pw) { %>
                <li data-password="<%= pw.password %>" data-id="<%= pw.id %>">
                    <span class="credential-label">Site:</span>
                    <span class="credential-value site"><%= pw.website %></span> | 
                    <span class="credential-label">Username/Email:</span>
                    <span class="credential-value username"><%= pw.username %></span> 
                    <button class="edit-credential">Edit</button>
                    <button class="copy-password">Copy Password</button>
                </li>
            <% }); %>
        </ul>
    
        <a href="/logout">Logout</a>
    </div>

    
    
    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Edit Credential</h2>
            <form id="editCredentialForm">
                <input type="hidden" id="editId" name="id">
                <input type="text" id="editSite" name="site" placeholder="Site" required>
                <input type="text" id="editUsername" name="username" placeholder="Username or Email" required>
                <div class="password-container">
                    <input type="password" id="editPassword" name="password" placeholder="Password" required>
                    <span class="eye-icon" onclick="togglePasswordVisibility(this)">üëÅÔ∏è</span>
                </div>
                <button type="button" id="generateEditPassword">Generate Random Password</button>
                <button type="submit">Save Changes</button>
            </form>
        </div>
    </div>
    <script>
       const userToken = '<%= user.token %>';

        document.querySelectorAll('.copy-password').forEach(button => {
            button.addEventListener('click', function() {
                const actualPassword = this.closest('li').dataset.password;
                navigator.clipboard.writeText(actualPassword)
                    .then(() => alert('Password copied to clipboard'))
                    .catch(err => console.error('Failed to copy: ', err));
            });
        });
    
        function generatePassword(inputElement) {
            fetch('/generate-password')
                .then(response => response.json())
                .then(data => {
                    inputElement.value = data.password;
                })
                .catch(error => console.error('Error:', error));
        }
    
        document.getElementById('generatePassword').addEventListener('click', function() {
            generatePassword(document.querySelector('input[name="password"]'));
        });
    
        const modal = document.getElementById('editModal');
        const closeBtn = document.getElementsByClassName('close')[0];
        const editForm = document.getElementById('editCredentialForm');
    
        document.querySelectorAll('.edit-credential').forEach(button => {
            button.addEventListener('click', function() {
                const li = this.closest('li');
                const id = li.dataset.id;
                const site = li.querySelector('.credential-value.site').textContent.trim();
                const username = li.querySelector('.credential-value.username').textContent.trim();
                const password = li.dataset.password;
    
                document.getElementById('editId').value = id;
                document.getElementById('editSite').value = site;
                document.getElementById('editUsername').value = username;
                document.getElementById('editPassword').value = password;
    
                modal.style.display = 'block';
            });
        });
    
        document.getElementById('generateEditPassword').addEventListener('click', function() {
            generatePassword(document.getElementById('editPassword'));
        });
    
        closeBtn.onclick = function() {
            modal.style.display = 'none';
        }
    
        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }
    
        editForm.onsubmit = function(e) {
            e.preventDefault();
            const formData = new FormData(editForm);
            formData.append('token', userToken);
            fetch('/edit-credential', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(Object.fromEntries(formData))
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to update credential: ' + (data.message || 'Unknown error'));
                }
            })
            .catch(error => console.error('Error:', error));
        }
    
        function togglePasswordVisibility(icon) {
            const input = icon.previousElementSibling;
            if (input.type === 'password') {
                input.type = 'text';
                icon.textContent = 'üôà';
            } else {
                input.type = 'password';
                icon.textContent = 'üëÅÔ∏è';
            }
        }
    
        function removeCredential(id) {
            if (confirm('Are you sure you want to delete this credential?')) {
                fetch('/remove-credential', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id: id, token: userToken })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Failed to remove credential: ' + (data.message || 'Unknown error'));
                    }
                })
                .catch(error => console.error('Error:', error));
            }
        }

        document.querySelectorAll('li[data-id]').forEach(item => {
            const removeButton = document.createElement('button');
            removeButton.textContent = 'Remove';
            removeButton.onclick = () => removeCredential(item.dataset.id);
            item.appendChild(removeButton);
        });

        document.querySelector('form[action="/add-credentials"]').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);
            data.token = userToken;

            fetch('/add-credentials', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    throw new Error(data.message || 'Unknown error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to add credential: ' + error.message);
            });
        });
    </script>
</body>
</html>